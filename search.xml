<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring Boot集成MyBatis]]></title>
    <url>%2Fjialin43.github.io%2F2019%2F08%2F02%2FspringbootMybatis%2F</url>
    <content type="text"><![CDATA[参考MyBatis官网 1. 添加maven依赖添加到pom.xml 12345678910111213141516&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 2. 配置MySQL连接编辑application.properties这个文件,我用的xampp中的MySQL所以root密码为空,我的数据库名字叫”discuss” 1234spring.datasource.url=jdbc:mysql://localhost/discuss?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTCspring.datasource.username=rootspring.datasource.password=spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver 到此为止MyBatis就算是整合进来了,下面我们来测试一下是否成功 验证在数据库中添加一个user的表12345678910111213SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(100) DEFAULT NULL, `password` varchar(100) DEFAULT NULL, `nickname` varchar(100) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8; 编写一个User的model1234567public class User &#123; private Integer id; private String username; private String password; private String nickname;&#125; 包含了id,username,password,nickname这四个属性,请自行alt+insert生成getter和setter方法 编写一个mapper12345678@Mapperpublic interface UserMapper &#123; //@Select("SELECT id,username,password,nickname FROM USER") //User find(); @Insert("INSERT INTO USER (USERNAME,PASSWORD,NICKNAME) VALUES(#&#123;username&#125;,#&#123;password&#125;,#&#123;nickname&#125;)") void insert(User user);&#125; 在Controller中添加一个测试方法首先要注入mapper 123456789101112@AutowiredUserMapper userMapper;@RequestMapping("/addUser")public String add()&#123; User user = new User(); user.setUsername("admin"); user.setPassword("admin123"); user.setNickname("管理员"); userMapper.insert(user); return "index";&#125; 之后浏览器访问:”http://localhost:8080/addUser&quot;再查看数据库中的user表,如果有数据说明我们MyBatis整合成功 注意点 连接MySQL数据库时一定要指定好时区和编码,不然会报错 之前开发SSM时习惯于将Controller统一放到包里,但是Spring Boot默认却无法识别提示conflict,只能暂时将controller跟SpringBootApplication放到同一目录]]></content>
  </entry>
  <entry>
    <title><![CDATA[记录一下安装hexo的过程]]></title>
    <url>%2Fjialin43.github.io%2F2019%2F07%2F31%2Fmy%20first%20blog%2F</url>
    <content type="text"><![CDATA[Quick Start首先你的电脑需要安装node.js和Git安装好Git之后需要配置本机与Github之间的ssh方便更新同步博客到Github上，在一个地方新建一个文件夹作为我们博客的根目录,在文件夹内右键选择Git bash here 123456git config --global user.name "你的GitHub注册名"# 回车git config --global user.email "你的Github注册邮箱"# 回车ssh-keygen -t rsa -C "你的GitHub注册邮箱"# 三个回车，保持默认就行，如果成功会出现一堆字符一样的画面 并且会在C:\Users\你的用户名.ssh\下生成id_rsa.pub这个文件，用记事本打开复制其中的内容到Github网站设置页面中的SSH and GPG keys标签，点击右上角的New SSH Key添加一个新key，然后在bash中运行 1ssh git@github.com 如果提示如下那么说明SSH Key配置正确 用npm安装hexo相关包到你的电脑上1npm install -g hexo-cli 初始化hexo博客系统1hexo init 生成静态文件1hexo g 本地运行博客系统1hexo s 浏览器访问http:localhost:4000即可成功打开本地的博客页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fjialin43.github.io%2F2019%2F07%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[黑马Vue学习笔记]]></title>
    <url>%2F2019%2F08%2F12%2Fvue-study-01%2F</url>
    <content type="text"><![CDATA[Hello World Vue 引入Vue.js文件 1&lt;script src="lib/vue.min.js"&gt;&lt;/script&gt; 在页面创建一个需要被控制的div区域 123&lt;div id="app"&gt; &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;&lt;/div&gt; 创建一个Vue实例 123456789&lt;script&gt; var vm = new Vue(&#123; el: "#app", // 表示当面new的vue实例要控制页面的哪个区域 这里的data就是MVVM中的M,专门用来保存每个页面的数据 data: &#123; msg:'欢迎学习vue' &#125; &#125;); &lt;/script&gt; ‘el’表示当前创建的Vue实例控制页面的哪个区域data中存放el要用到的数据通过Vue提供的命令,很方便把数据渲染到页面中,我们不需再手动操作绑定DOM元素赋值了,(Vue等框架不提倡我们手动操作DOM元素) 我们new出来的vm对象就是MVVM中的VM调度者 属性绑定相关 12345&lt;style&gt; [v-cloak] &#123; display: none; &#125;&lt;/style&gt; 通过v-cloak能够解决插值表达式闪烁的问题,默认v-text没用闪烁问题 v-html能够将内容解析成HTML v-bind 是Vue中提供绑定属性的指令,可以缩写为:要绑定的属性,v-bind可以写合法的js表达式 按钮事件绑定 Vue提供v-on: 事件绑定机制,缩写为@事件123456789101112131415&lt;input type="button" v-on:click="show" value="Start"&gt;&lt;/button&gt;&lt;script&gt; var vm = new Vue(&#123; el: "#app", // 表示当面new的vue实例要控制页面的哪个区域 data: &#123; msg:'欢迎学习vue' &#125;, methods:&#123; show:function()&#123; alert('Hello'); &#125; &#125; &#125;); &lt;/script&gt; 走马灯Demo 给按钮绑定一个点击事件 在开始按钮的处理函数中,写业务逻辑代码:拿到msg字符串调用字符串substring方法进行字符串截取操作,把第一个字符截取出来,放到最后一个位置,为了实现跑马灯效果需要把上述代码放入定时器中执行 在vm实例中想要获取data上的数据或者调用methods中的方法必须通过this.属性名或this.方法名来进行访问,this就表示我们new出来的vm实例 VM实例会监听自己data中的数据变化,只要一发生数据变化就会自动把最新数据从data中渲染到页面中 事件修饰符 stop阻止冒泡 prevent阻止默认事件 capture添加事件侦听器时使用事件捕获模式 .self只当事件在该元素本身(比如不是子元素)触发时触发回调 .once 事件只触发一次1234567891011&lt;div id="app" class="inner" @click="divHandler"&gt; &lt;!-- 使用.stop阻止冒泡 --&gt; &lt;input type="button" value="Button" @click.stop="btnHander" /&gt; &lt;!-- 使用.prevent阻止默认行为 --&gt; &lt;a href="http://www.baidu.com" @click.prevent="linkClick"&gt;baidu一下&lt;/a&gt; &lt;/div&gt; &lt;!-- 使用.capture 实现捕获触发事件的机制--&gt; &lt;div id="app" class="inner" @click="divHandler"&gt; &lt;!-- 使用.stop阻止冒泡 --&gt; &lt;input type="button" value="Button" @click.stop="btnHander" /&gt;&lt;/div&gt; v-model 双向数据绑定指令 v-bind 只能实现数据的单向绑定,从Model自动绑定到View中,无法实现数据的双向绑定 使用v-model可以实现表单元素和Model中数据的双向绑定 v-model 只能运用在表单元素中1&lt;input type="text" v-model="msg" style="width: 100%"&gt; v-model 实例 简易计算器123456789101112131415161718192021222324252627282930313233343536373839404142&lt;div id="app"&gt; &lt;input type="text" v-model="x1" /&gt; &lt;select v-model="opt"&gt; &lt;option value="+"&gt;+&lt;/option&gt; &lt;option value="-"&gt;-&lt;/option&gt; &lt;option value="*"&gt;*&lt;/option&gt; &lt;option value="/"&gt;/&lt;/option&gt; &lt;/select&gt; &lt;input type="text" v-model="x2" /&gt; &lt;input type="button" value="=" @click="calc" /&gt; &lt;input type="text" v-model="ans" /&gt;&lt;/div&gt;&lt;script&gt; var vm = new Vue(&#123; el: "#app", data: &#123; x1: 0, x2: 0, ans: 0, opt: "+" &#125;, methods: &#123; calc() &#123; switch (this.opt) &#123; case "+": this.ans = parseInt(this.x1)+parseInt(this.x2) break; case "-": this.ans = parseInt(this.x1)-parseInt(this.x2) break; case "*": this.ans = parseInt(this.x1)*parseInt(this.x2) break; case "/": this.ans = parseInt(this.x1)/parseInt(this.x2) break; &#125; &#125; &#125; &#125;); &lt;/script&gt; Vue中的样式class 直接传递一个数组,注意:这里的class需要用v-bind进行绑定 123456789101112131415&lt;style&gt; .red &#123; color: red; &#125; .thin &#123; font-weight: 200; &#125; .italic &#123; font-style: italic; &#125; .active &#123; letter-spacing: 0.5em; &#125; &lt;/style&gt;&lt;h1 :class=['thin','active']&gt;这是一个特别大的H1,无法想象的大 &lt;/h1&gt; 在数组中使用三元表达式 1&lt;h1 :class=['thin',flag?'active':'']&gt;这是一个特别大的H1,无法想象的大 &lt;/h1&gt; 其中的flag是data中创建的布尔属性 在数组中使用对象来代替三元表达式,提高代码可读性 1&lt;h1 :class=['thin',&#123;'active':flag&#125;]&gt;这是一个特别大的H1,无法想象的大 &lt;/h1&gt; 直接绑定对象 1&lt;h1 :class=&#123;red:flag&#125;&gt;这是一个特别大的H1,无法想象的大 &lt;/h1&gt; 当为class使用v-bind绑定对象的时候,对象的属性是类名,由于对象属性可带引号也可不带引号,所以red可以不写引号,属性的值是一个标识符 1&lt;h1 :class="classList"&gt;这是一个特别大的H1,无法想象的大 &lt;/h1&gt; 1classList:&#123;thin:true,red:true&#125; 内联样式的使用 直接在元素上通过:style书写样式对象 将样式对象定义到data中,并直接引用到:style中 12345h1 :style="styleList"&gt;这是一个特别大的H1,无法想象的大 &lt;/h1&gt;data:&#123; styleList:&#123;color:'blue','font-size':'120px'&#125;&#125; 在:style中通过数组,引用多个data上的样式对象 1&lt;h1 :style="[styleList,style2List]"&gt;这是一个特别大的H1,无法想象的大 &lt;/h1&gt; 1234data:&#123; styleList:&#123;color:'blue','font-size':'120px'&#125;, style2List:&#123;'font-weight':50&#125;&#125; v-for循环的使用 简单数据1234567891011&lt;div id="app"&gt; &lt;p v-for="item in list"&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue(&#123; el: "#app", data: &#123; list: [1, 2, 3, 4, 5, 6, 7, 8] &#125; &#125;); &lt;/script&gt; 其中item可替换成(item,index),index为索引值 循环对象123456789101112131415161718192021&lt;p v-for="(value,key) in user"&gt;&#123;&#123; key &#125;&#125;---&#123;&#123; value &#125;&#125;&lt;/p&gt;&lt;script&gt; var vm = new Vue(&#123; el: "#app", data: &#123; list: [1, 2, 3, 4, 5, 6, 7, 8], user:&#123; id:1, name:'john mayer', gender:'man' &#125; &#125; &#125;);&lt;/script&gt;``` **在遍历对象身上的键值对的时候,除了key和value,在第三个位置还有index索引**3. 循环迭代数据```html &lt;p v-for="count in 10"&gt;&#123;&#123;count&#125;&#125;&lt;/p&gt; 用v-for 迭代数字注意count值从1开始 v-for 使用注意事项 在vue 2.2.0+ 版本中,当在组件中使用v-for时,key值是必须的,用v-bind:key的形式指定key的值 v-for 循环的时候,key只能用string或者number 1&lt;p v-for="item in list" :key="item"&gt; v-if与v-show的使用 v-if 每次都会删除或创建节点,有较高的切换性能消耗 v-show 每次不会删除或创建节点,只是切换了元素的display:none的样式,有较高的初始渲染消耗 如果元素涉及到频繁的切换,最好不用v-if而是推荐使用v-show,如果元素可能永远也不会被显示出来给用户看到,则推荐使用v-if]]></content>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot集成MyBatis]]></title>
    <url>%2F2019%2F08%2F02%2FspringbootMybatis%2F</url>
    <content type="text"><![CDATA[参考MyBatis官网 1. 添加maven依赖添加到pom.xml 12345678910111213141516&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 2. 配置MySQL连接编辑application.properties这个文件,我用的xampp中的MySQL所以root密码为空,我的数据库名字叫”discuss” 1234spring.datasource.url=jdbc:mysql://localhost/discuss?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTCspring.datasource.username=rootspring.datasource.password=spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver 到此为止MyBatis就算是整合进来了,下面我们来测试一下是否成功 验证在数据库中添加一个user的表12345678910111213SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(100) DEFAULT NULL, `password` varchar(100) DEFAULT NULL, `nickname` varchar(100) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8; 编写一个User的model1234567public class User &#123; private Integer id; private String username; private String password; private String nickname;&#125; 包含了id,username,password,nickname这四个属性,请自行alt+insert生成getter和setter方法 编写一个mapper12345678@Mapperpublic interface UserMapper &#123; //@Select("SELECT id,username,password,nickname FROM USER") //User find(); @Insert("INSERT INTO USER (USERNAME,PASSWORD,NICKNAME) VALUES(#&#123;username&#125;,#&#123;password&#125;,#&#123;nickname&#125;)") void insert(User user);&#125; 在Controller中添加一个测试方法首先要注入mapper 123456789101112@AutowiredUserMapper userMapper;@RequestMapping("/addUser")public String add()&#123; User user = new User(); user.setUsername("admin"); user.setPassword("admin123"); user.setNickname("管理员"); userMapper.insert(user); return "index";&#125; 之后浏览器访问:”http://localhost:8080/addUser&quot;再查看数据库中的user表,如果有数据说明我们MyBatis整合成功 注意点 连接MySQL数据库时一定要指定好时区和编码,不然会报错 之前开发SSM时习惯于将Controller统一放到包里,但是Spring Boot默认却无法识别提示conflict,只能暂时将controller跟SpringBootApplication放到同一目录]]></content>
  </entry>
  <entry>
    <title><![CDATA[记录一下安装hexo的过程]]></title>
    <url>%2F2019%2F07%2F31%2Fmy%20first%20blog%2F</url>
    <content type="text"><![CDATA[Quick Start首先你的电脑需要安装node.js和Git安装好Git之后需要配置本机与Github之间的ssh方便更新同步博客到Github上，在一个地方新建一个文件夹作为我们博客的根目录,在文件夹内右键选择Git bash here 123456git config --global user.name "你的GitHub注册名"# 回车git config --global user.email "你的Github注册邮箱"# 回车ssh-keygen -t rsa -C "你的GitHub注册邮箱"# 三个回车，保持默认就行，如果成功会出现一堆字符一样的画面 并且会在C:\Users\你的用户名.ssh\下生成id_rsa.pub这个文件，用记事本打开复制其中的内容到Github网站设置页面中的SSH and GPG keys标签，点击右上角的New SSH Key添加一个新key，然后在bash中运行 1ssh git@github.com 如果提示如下那么说明SSH Key配置正确 用npm安装hexo相关包到你的电脑上1npm install -g hexo-cli 初始化hexo博客系统1hexo init 生成静态文件1hexo g 本地运行博客系统1hexo s 浏览器访问http:localhost:4000即可成功打开本地的博客页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
